#use "match"

// dot operator (normally infix converted to prefix by the reader)
export "." function (forms) {
  @transpileSubExpressions(forms);

  match (forms) {

    case ["." object property]
      """${object}.${property}"""

    default @error('The dot (.) requires an object and a property');
  }
}

// "dotprop" is like e.g. (.forEach arr)
// we convert it to e.g. (dotprop forEach arr) while reading
export "dotprop" function (forms) {
  @transpileSubExpressions(forms);

  match (forms) {

    case ["dotprop" property object]
      """${object}.${property}"""

    default @error('A dot property (.propname) requires an object');
  }
}

export "new" function {

  // new module.Classname(arg1, arg2)
  case ["new" classexpr::sllist ...constructorArgs]  {
    if(constructorArgs.length === 0) {
      return """new ${@transpileExpression(classexpr)}""";
    }
    else {
      return """new ${@transpileExpression(classexpr)}(${@transpileArgList(constructorArgs)})""";
    }
  }

  // new Classname(arg1, arg2)
  case ["new" classname::slsymbol ...constructorArgs]  {
    """new ${classname}(${@transpileArgList(constructorArgs)})"""
  }

  case ["new" ...newArgs]  {
    @x(newArgs);
    """new ${newArgs}"""
  }

  default @error("missing class name for new operator?");
}

// if expression (a javascript ternary)
// TODO (fix) the line below blows up in atom preview
//       with no space between function and (forms)!!
export "if?" function (forms) {

  match (forms) {

    case ["if?" condition iftrue iffalse]
      """(${@x(condition)} ?
       ..    ${@transpileCommaExpression(iftrue)} :
       ..    ${@transpileCommaExpression(iffalse)})"""

    case ["if?" condition iftrue]
      """(${@x(condition)} ?
       ..    ${@transpileCommaExpression(iftrue)} : undefined )"""

    default @error('if? expects a condition followed by one (for "then") or two (for "else") body expressions');
  }
}

// statements ///////////////////////////////////////////////////////
// the following generate javascript *statements* which can lead to
// javascript syntax errors if used where *expressions* are expected.
// Currently sugarlisp does *not* warn about such mismatches, it's
// the programmer's job to use these appropriately and correct their
// code if such errors are reported by javascript.

// if statement (a standard javascript "if")
// TODO (fix) the line below blows up in atom preview
//       with no space between function and (forms)!!
export "if" function (forms) {
  @transpileSubExpressions(forms);

  match (forms) {

    case ["if" condition iftrue iffalse]
      """if(${condition}) {
       ..  ${iftrue}}
       ..else {
       ..  ${iffalse}}"""

    case ["if" condition iftrue]
      """if(${condition}) {
       ..  ${iftrue}}"""

    default @error('if expects a condition followed by one (for "then") or two (for "else") body expressions');
  }
}

/**
* simple while loop
*   the body is expected in-line (with no wrapper) after the cond i.e.
*
*   (while cond
*      bodyexpr1
*      bodyexpr2)
*/
export "while" function {

  case ["while" condition ...body] {
    """while(${@x(condition)}) {
     ..    ${@transpileExpressions(body, true)}}"""
  }

  default @error("a while loop expects a condition and loop body");
}

// javascript for statement
// (not to be confused with the for comprehension macro for')
export "for" function {

  case ["for" initializer condition finalizer ...body] {
    """for(${@x(initializer)}; ${@x(condition)}; ${@x(finalizer)}) {
     ..    ${@transpileExpressions(body, true)}}"""
  }

  default @error("a for loop expects an initializer, condition, finalizer, and loop body");
}

/**
* dotimes loop
*   it expects a list with the var name and the count followed by the body
*   in-line (with no wrapper) i.e.
*
*   (dotimes (varname count)
*      bodyexpr1
*      bodyexpr2)
*
* note:  this is generating a javascript for *statement*.
*/
export "dotimes" function {

  case ["dotimes" spec::sllist ...body]  {
    """for(var ${first(spec)} = 0; ${first(spec)} < ${@x(spec[1])}; ${first(spec)}++) {
     ..    ${@transpileExpressions(body, true)}}"""
  }

  default @error("dotimes expects (var name, iterations) followed by the loop body");
}

export "switch" function {

  case ["switch" switchon ...body] {
    """switch(${@x(switchon)}) {
     ${body.map((caseform, pos) => {
       (pos % 2 === 0 ?
          sl.generated((sl.valueOf(caseform) !== "default" ? "case " : ""),
                        sl.valueOf(caseform), ":\n") :
          @transpileExpression(caseform))
        })}}"""
  }

  default @error("a switch statement expects a value and body");
}

export "break" function (forms) {
  sl.generated("break");
}
