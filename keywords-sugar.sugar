#use "match"

// dot operator (normally infix converted to prefix by the reader)
export "." function (forms) {
  @transpileSubExpressions(forms);

  match (forms) {

    case ["." object property]
      """${object}.${property}"""

    default @error('The dot (.) requires an object and a property');
  }
}

// "dotprop" is like e.g. (.forEach arr)
// we convert it to e.g. (dotprop forEach arr) while reading
export "dotprop" function (forms) {
  @transpileSubExpressions(forms);

  match (forms) {

    case ["dotprop" property object]
      """${object}.${property}"""

    default @error('A dot property (.propname) requires an object');
  }
}

// if expression (a javascript ternary)
// TODO (fix) the line below blows up in atom preview
//       with no space between function and (forms)!!
export "if" function (forms) {
  @transpileSubExpressions(forms);

  match (forms) {

    case ["if" condition iftrue iffalse]
      """(${condition} ?
       ..    ${iftrue} :
       ..    ${iffalse})"""

    case ["if" condition iftrue]
      """(${condition} ?
       ..    ${iftrue} : undefined )"""

    default @error('if expects a condition followed by one (for "then") or two (for "else") body expressions');
  }
}

export "new" function {

  case ["new" classname::slsymbol ...constructorArgs]  {
    @x(constructorArgs);
    """new ${classname}(${constructorArgs})"""
  }

  case ["new" ...newArgs]  {
    @x(newArgs);
    """new ${newArgs}"""
  }

  default @error("missing class name for new operator?");
}

// this version of while when used with "do" or {}
// wraps it's body in an IIFE.
// This is a problem for the csp stuff because you
// can't put yield statements in an IIFE because it's
// not a generator.  So with csp they should use the
// #use "statements" dialect which provides a different
// while implementation.
export "while" function {

  case ["while" condition body::sllist] {
    """while(${@x(condition)}) {
     ..    ${@x(body)}
     ..}"""
  }

  default @error("a while loop expects a condition and loop body");
}

export "times" function {

  case ["times" varname::slsymbol iterations body::sllist]  {
    """for(var ${varname} = 0; ${varname} < ${@x(iterations)}; ${varname}++) {
     ..    ${@x(body)}
     ..}"""
  }

  default @error("a times loop expects a variable name, number of iterations, and the loop body");
}
