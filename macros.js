// Generated by SugarLisp v0.5
exports["undefined?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", ["typeof", ["~", "obj"]], "\"undefined\""]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["defined?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["!==", ["typeof", ["~", "obj"]], "\"undefined\""]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["null?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", ["~", "obj"], null]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["nil?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["||", ["undefined?", ["~", "obj"]],
      ["null?", ["~", "obj"]]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["true?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", true, ["~", "obj"]]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["false?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", false, ["~", "obj"]]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["boolean?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", ["typeof", ["~", "obj"]], "\"boolean\""]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["zero?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", 0, ["~", "obj"]]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["number?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", [
      [".", [".", [".", "Object", "prototype"], "toString"], "call"],
      ["~", "obj"]
    ], "\"[object Number]\""]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["even?"] = function(forms) {
  var macrodef = ["macro", ["num"],
    ["===", ["%", ["~", "num"], 2], 0]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["odd?"] = function(forms) {
  var macrodef = ["macro", ["num"],
    ["!==", ["%", ["~", "num"], 2], 0]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["string?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", [
      [".", [".", [".", "Object", "prototype"], "toString"], "call"],
      ["~", "obj"]
    ], "\"[object String]\""]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["array?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", [
      [".", [".", [".", "Object", "prototype"], "toString"], "call"],
      ["~", "obj"]
    ], "\"[object Array]\""]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["object?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", [
      [".", [".", [".", "Object", "prototype"], "toString"], "call"],
      ["~", "obj"]
    ], "\"[object Object]\""]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["function?"] = function(forms) {
  var macrodef = ["macro", ["obj"],
    ["===", [
      [".", [".", [".", "Object", "prototype"], "toString"], "call"],
      ["~", "obj"]
    ], "\"[object Function]\""]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["when"] = function(forms) {
  var macrodef = ["macro", ["cond", "...rest"],
    ["if?", ["~", "cond"],
      ["do", ["~", "rest"]]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["unless"] = function(forms) {
  var macrodef = ["macro", ["cond", "...rest"],
    ["when", [
        ["!", ["~", "cond"]]
      ],
      ["do", ["~", "rest"]]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["cond"] = function(forms) {
  var macrodef = ["macro", ["...rest"],
    ["if?", ["#args-shift", "rest"],
      ["#args-shift", "rest"],
      ["#args-if", "rest", ["cond", ["~", "rest"]]]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["case"] = function(forms) {
  var macrodef = ["macro", ["matchto", "...rest"],
    ["if?", ["===", ["~", "matchto"],
        ["#args-shift", "rest"]
      ],
      ["#args-shift", "rest"],
      ["#args-if", "rest", ["case", ["~", "matchto"],
        ["~", "rest"]
      ]]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["arrayInit"] = function(forms) {
  var macrodef = ["macro", ["len", "obj"],
    [
      ["function", ["l", "o"],
        ["var", "ret", ["array"]],
        ["js", "\"for(var i=0;i<l;i++) ret.push(o);\""], "ret"
      ],
      ["~", "len"],
      ["~", "obj"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["arrayInit2d"] = function(forms) {
  var macrodef = ["macro", ["i", "j", "obj"],
    [
      ["function", ["i", "j", "o"],
        ["var", "ret", ["array"]],
        ["js", "\"for(var n=0;n<i;n++){var inn=[];for(var m=0;m<j;m++) inn.push(o); ret.push(inn);}\""], "ret"
      ],
      ["~", "i"],
      ["~", "j"],
      ["~", "obj"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["->"] = function(forms) {
  var macrodef = ["macro", ["func", "form", "...rest"],
    ["#args-if", "rest", ["->", [
          [
            ["#args-shift", "form"],
            ["~", "func"]
          ],
          ["~@", "form"]
        ],
        ["~", "rest"]
      ],
      [
        [
          ["#args-shift", "form"],
          ["~", "func"]
        ],
        ["~@", "form"]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["alias"] = function(forms) {
  var macrodef = ["macro", ["from", "to"],
    ["macro", ["~", "from"],
      ["...rest"],
      [
        ["~", "to"],
        ["~", ["js", "\"sl.list('~','rest')\""]]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["each"] = function(forms) {
  var macrodef = ["macro", ["arr", "...rest"],
    [
      ["dotprop", "forEach", ["~", "arr"]],
      ["~", "rest"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["eachPair"] = function(forms) {
  var macrodef = ["macro", ["arr", "fn"],
    [
      ["function", ["___a", "___f"],
        ["js", "\"for(var ___n=0;___n<___a.length-1;___n+=2){ ___f(___a[___n], ___a[___n+1]); }\""]
      ],
      ["~", "arr"],
      ["~", "fn"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["reduce"] = function(forms) {
  var macrodef = ["macro", ["arr", "...rest"],
    [
      ["dotprop", "reduce", ["~", "arr"]],
      ["~", "rest"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["eachKey"] = function(forms) {
  var macrodef = ["macro", ["obj", "fn", "...rest"],
    [
      ["function", ["o", "f", "s"],
        ["var", "_k", [
          [".", "Object", "keys"], "o"
        ]],
        ["each", "_k", ["function", ["elem"],
          [
            [".", "f", "call"], "s", ["get", "elem", "o"], "elem", "o"
          ]
        ]]
      ],
      ["~", "obj"],
      ["~", "fn"],
      ["~", "rest"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["each2d"] = function(forms) {
  var macrodef = ["macro", ["arr", "fn"],
    ["each", ["~", "arr"],
      ["function", ["___elem", "___i", "___oa"],
        ["each", "___elem", ["function", ["___val", "___j", "___ia"],
          [
            ["~", "fn"], "___val", "___j", "___i", "___ia", "___oa"
          ]
        ]]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["map"] = function(forms) {
  var macrodef = ["macro", ["...rest"],
    [
      [".", [".", [".", "Array", "prototype"], "map"], "call"],
      ["~", "rest"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["filter"] = function(forms) {
  var macrodef = ["macro", ["...rest"],
    [
      [".", [".", [".", "Array", "prototype"], "filter"], "call"],
      ["~", "rest"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["some"] = function(forms) {
  var macrodef = ["macro", ["...rest"],
    [
      [".", [".", [".", "Array", "prototype"], "some"], "call"],
      ["~", "rest"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["every"] = function(forms) {
  var macrodef = ["macro", ["...rest"],
    [
      [".", [".", [".", "Array", "prototype"], "every"], "call"],
      ["~", "rest"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["loop"] = function(forms) {
  var macrodef = ["macro", ["args", "vals", "...rest"],
    [
      ["function", [],
        ["var", "recur", null, "___result", [
          ["!", "undefined"]
        ], "___nextArgs", null, "___f", ["function", ["~", "args"],
          ["~", "rest"]
        ]],
        ["set", "recur", ["function", [],
          ["set", "___nextArgs", "arguments"],
          ["if?", ["===", "___result", "undefined"], "undefined", ["do", ["set", "___result", "undefined"],
            ["js", "\"while(___result===undefined) ___result=___f.apply(this,___nextArgs);\""], "___result"
          ]]
        ]],
        ["recur", ["~@", "vals"]]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["for'"] = function(forms) {
  var macrodef = ["macro", ["...rest"],
    ["doMonad", "arrayMonad", ["~", "rest"]]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["first"] = function(forms) {
  var macrodef = ["macro", ["arr"],
    ["get", 0, ["~", "arr"]]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["rest"] = function(forms) {
  var macrodef = ["macro", ["arr"],
    [
      [".", ["~", "arr"], "slice"], 1, [".", ["~", "arr"], "length"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["empty?"] = function(forms) {
  var macrodef = ["macro", ["arr"],
    ["===", 0, [".", ["~", "arr"], "length"]]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["#aftersetinlinefn"] = function(forms) {
  var macrodef = ["macro", ["to", "reactorfn"],
    ["#after", ["set", ["#args-get", 1, ["~@", "reactorfn"]]],
      ["set", ["~", "to"],
        [
          ["~", "reactorfn"],
          ["#args-get", 1, ["~@", "reactorfn"]]
        ]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["#beforesetinline"] = function(forms) {
  var macrodef = ["macro", ["to", "reactorfn"],
    ["#before", ["set", ["#args-get", 1, ["~@", "reactorfn"]]],
      ["set", ["~", "to"],
        [
          ["~", "reactorfn"],
          ["#args-get", 1, ["~@", "reactorfn"]]
        ]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["#afterset"] = function(forms) {
  var macrodef = ["macro", ["to", "reactorfn"],
    ["#after", ["set", ["#args-get", 1, ["~@", "reactorfn"]]],
      ["set", ["~", "to"],
        ["~", "reactorfn"]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["#beforeset"] = function(forms) {
  var macrodef = ["macro", ["to", "reactorfn"],
    ["#before", ["set", ["#args-get", 1, ["~@", "reactorfn"]]],
      ["set", ["~", "to"],
        ["~", "reactorfn"]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["sequence"] = function(forms) {
  var macrodef = ["macro", ["name", "args", "init", "...rest"],
    ["var", ["~", "name"],
      ["function", ["~", "args"],
        [
          ["function", [],
            ["#args-erase-head", "init"],
            ["~@", "init"],
            ["var", "next", null],
            ["var", "___curr", -1],
            ["var", "___actions", ["array", ["~@", "rest"]]],
            ["set", "next", ["function", [],
              ["var", "ne", ["get", ["++", "___curr"], "___actions"]],
              ["if?", "ne", "ne", ["throw", "\"Call to (next) beyond sequence.\""]]
            ]],
            [
              [
                ["next"]
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["template"] = function(forms) {
  var macrodef = ["macro", ["name", "args", "...rest"],
    ["var", ["~", "name"],
      ["function", ["~", "args"],
        ["str", ["~", "rest"]]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["template-repeat"] = function(forms) {
  var macrodef = ["macro", ["arg", "...rest"],
    ["reduce", ["~", "arg"],
      ["function", ["___memo", "elem", "index"],
        ["+", "___memo", ["str", ["~", "rest"]]]
      ], "\"\""
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["template-repeat-key"] = function(forms) {
  var macrodef = ["macro", ["obj", "...rest"],
    ["do", ["var", "___ret", "\"\""],
      ["eachKey", ["~", "obj"],
        ["function", ["value", "key"],
          ["set", "___ret", ["+", "___ret", ["str", ["~", "rest"]]]]
        ]
      ], "___ret"
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["assert"] = function(forms) {
  var macrodef = ["macro", ["cond", "message"],
    ["if?", ["true?", ["~", "cond"]],
      ["+", "\"Passed - \"", ["~", "message"]],
      ["+", "\"Failed - \"", ["~", "message"]]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["testGroup"] = function(forms) {
  var macrodef = ["macro", ["name", "...rest"],
    ["var", ["~", "name"],
      ["function", [],
        ["array", ["~", "rest"]]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["testRunner"] = function(forms) {
  var macrodef = ["macro", ["groupname", "desc"],
    [
      ["function", ["groupname", "desc"],
        ["var", "start", ["new", "Date"], "tests", ["groupname"], "passed", 0, "failed", 0],
        ["each", "tests", ["function", ["elem"],
          ["if?", [
              [".", "elem", "match"],
              ["regex", "\"^Passed\""]
            ],
            ["++", "passed"],
            ["++", "failed"]
          ]
        ]],
        ["str", ["str", "\"\\n\"", "desc", "\"\\n\"", "start", "\"\\n\\n\""],
          ["template-repeat", "tests", "elem", "\"\\n\""], "\"\\nTotal tests \"", [".", "tests", "length"], "\"\\nPassed \"", "passed", "\"\\nFailed \"", "failed", "\"\\nDuration \"", ["-", ["new", "Date"], "start"], "\"ms\\n\""
        ]
      ],
      ["~", "groupname"],
      ["~", "desc"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};
exports["identityMonad"] = function(forms) {
  var macrodef = ["macro", [],
    ["object",
      "mBind", ["function", ["mv", "mf"],
        ["mf", "mv"]
      ],
      "mResult", ["function", ["v"], "v"]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["maybeMonad"] = function(forms) {
  var macrodef = ["macro", [],
    ["object",
      "mBind", ["function", ["mv", "mf"],
        ["if?", ["null?", "mv"], null, ["mf", "mv"]]
      ],
      "mResult", ["function", ["v"], "v"],
      "mZero", null
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["arrayMonad"] = function(forms) {
  var macrodef = ["macro", [],
    ["object",
      "mBind", ["function", ["mv", "mf"],
        ["reduce", ["map", "mv", "mf"],
          ["function", ["accum", "val"],
            [
              [".", "accum", "concat"], "val"
            ]
          ],
          ["array"]
        ]
      ],
      "mResult", ["function", ["v"],
        ["array", "v"]
      ],
      "mZero", ["array"],
      "mPlus", ["function", [],
        ["reduce", [
            [".", [".", [".", "Array", "prototype"], "slice"], "call"], "arguments"
          ],
          ["function", ["accum", "val"],
            [
              [".", "accum", "concat"], "val"
            ]
          ],
          ["array"]
        ]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["stateMonad"] = function(forms) {
  var macrodef = ["macro", [],
    ["object",
      "mBind", ["function", ["mv", "f"],
        ["function", ["s"],
          ["var", "l", ["mv", "s"], "v", ["get", 0, "l"], "ss", ["get", 1, "l"]],
          [
            ["f", "v"], "ss"
          ]
        ]
      ],
      "mResult", ["function", ["v"],
        ["function", ["s"],
          ["array", "v", "s"]
        ]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["continuationMonad"] = function(forms) {
  var macrodef = ["macro", [],
    ["object",
      "mBind", ["function", ["mv", "mf"],
        ["function", ["c"],
          ["mv", ["function", ["v"],
            [
              ["mf", "v"], "c"
            ]
          ]]
        ]
      ],
      "mResult", ["function", ["v"],
        ["function", ["c"],
          ["c", "v"]
        ]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["m-bind"] = function(forms) {
  var macrodef = ["macro", ["bindings", "expr"],
    ["mBind", ["#args-second", "bindings"],
      ["function", [
          ["#args-shift", "bindings"]
        ],
        ["#args-if", "bindings", ["m-bind", ["~", "bindings"],
            ["~", "expr"]
          ],
          [
            ["function", [],
              ["~", "expr"]
            ]
          ]
        ]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["withMonad"] = function(forms) {
  var macrodef = ["macro", ["monad", "...rest"],
    [
      ["function", ["___monad"],
        ["var", "mBind", [".", "___monad", "mBind"], "mResult", [".", "___monad", "mResult"], "mZero", [".", "___monad", "mZero"], "mPlus", [".", "___monad", "mPlus"]],
        ["~", "rest"]
      ],
      [
        ["~", "monad"]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["doMonad"] = function(forms) {
  var macrodef = ["macro", ["monad", "bindings", "expr"],
    ["withMonad", ["~", "monad"],
      ["var", "____mResult", ["function", ["___arg"],
        ["if?", ["&&", ["undefined?", "___arg"],
          [
            ["!", ["undefined?", "mZero"]]
          ]
        ], "mZero", ["mResult", "___arg"]]
      ]],
      ["m-bind", ["~", "bindings"],
        ["____mResult", ["~", "expr"]]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};

exports["monad"] = function(forms) {
  var macrodef = ["macro", ["name", "obj"],
    ["var", ["~", "name"],
      ["function", [],
        ["~", "obj"]
      ]
    ]
  ];
  return this.macroexpand(forms, macrodef);
};